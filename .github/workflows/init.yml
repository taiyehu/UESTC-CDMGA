name: Server Initialization
on:
  workflow_dispatch: # 允许手动触发此工作流

jobs:
  init-server:
    name: Initialize Server
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies on remote server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_SUDO }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            # 更新包管理器
            sudo apt-get update -y
            sudo apt-get install -y openjdk-17-jdk nginx

            java -version
            nginx -v

            # 创建后端专用用户 webserver（如果不存在）
            if ! id -u webserver >/dev/null 2>&1; then
              sudo useradd -r -s /bin/false webserver
              echo "用户 webserver 已创建"
            else
              echo "用户 webserver 已存在"
            fi

            # 创建后端目录结构
            # 1. 创建目录结构 (不变)
            sudo mkdir -p /opt/webserver/app /opt/webserver/upload /opt/webserver/backup
            sudo mkdir -p /var/webserver/images /var/webserver/courses /var/webserver/log /var/webserver/scores/

            # 2. 将 'webserver' 用户加入 'www-data' 组
            # -a 表示追加（Append），-G 指定要加入的组
            sudo usermod -a -G www-data webserver

            # 3. 设置目录的所有权和权限（这是关键）
            # 将文件的所有者设为 webserver，组设为 www-data
            sudo chown -R webserver:www-data /opt/webserver /var/webserver

            # 设置权限：所有者有全部权限(rwx)，组有全部权限(rwx)，其他人无权限(---)
            sudo chmod -R 750 /opt/webserver /var/webserver

            # 4. （极其重要的一步）设置 SetGID 位
            # 这能保证今后在这些目录中创建的任何新文件或子目录，其属组都会自动继承父目录的 'www-data' 组。
            sudo chmod -R g+s /opt/webserver /var/webserver

            # 创建前端目录结构
            sudo mkdir -p /var/www/CDMGA-ui /var/www/backup
            sudo chown -R www-data:www-data /var/www/CDMGA-ui /var/www/backup
            sudo chmod -R 755 /var/www/CDMGA-ui /var/www/backup

            echo "All dependencies and directories initialized successfully!"


  Deploy_env:
    needs: init-server
    uses: ./.github/workflows/env_update.yml
    secrets:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_SUDO: ${{ secrets.SSH_SUDO }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_DOMIAN: ${{ secrets.SSH_DOMIAN }}
  Deploy_mvn:
    needs: init-server
    uses: ./.github/workflows/mvn_update.yml
    secrets:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_SUDO: ${{ secrets.SSH_SUDO }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
  Deploy_npm:
    needs: init-server
    uses: ./.github/workflows/npm_update.yml
    secrets:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_SUDO: ${{ secrets.SSH_SUDO }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PORT: ${{ secrets.SSH_PORT }}